{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "type": "text",
      "version": 38,
      "versionNonce": 2038597895,
      "isDeleted": false,
      "id": "skCAaZq3yIcfV70mWhfIx",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 480.66668701171875,
      "y": 124.66667175292969,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 467,
      "height": 25,
      "seed": 1756629065,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665056522041,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "OCLC API DEMO PROJECT PLANNING SHEET",
      "baseline": 18,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "OCLC API DEMO PROJECT PLANNING SHEET"
    },
    {
      "type": "rectangle",
      "version": 86,
      "versionNonce": 1408941927,
      "isDeleted": false,
      "id": "QrFelw493G1FmBs0QM3cn",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 413.3333435058594,
      "y": 205,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 512.0000305175781,
      "height": 336.66668701171875,
      "seed": 1015787241,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665056535539,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 42,
      "versionNonce": 911266055,
      "isDeleted": false,
      "id": "CSVLlHbk83CLt_tNjn70L",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 558,
      "y": 176.66668701171875,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 250,
      "height": 25,
      "seed": 228626057,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665056554588,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Database Table - Users",
      "baseline": 18,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Database Table - Users"
    },
    {
      "type": "line",
      "version": 70,
      "versionNonce": 275258983,
      "isDeleted": false,
      "id": "O06S1RDetIWtdsQpQPBof",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 411.3333435058594,
      "y": 307.66668701171875,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 512.0000305175781,
      "height": 0.666656494140625,
      "seed": 816178921,
      "groupIds": [],
      "strokeSharpness": "round",
      "boundElements": [],
      "updated": 1665056568085,
      "link": null,
      "locked": false,
      "startBinding": null,
      "endBinding": null,
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": null,
      "points": [
        [
          0,
          0
        ],
        [
          512.0000305175781,
          0.666656494140625
        ]
      ]
    },
    {
      "type": "line",
      "version": 72,
      "versionNonce": 1307432679,
      "isDeleted": false,
      "id": "B4QzZ4nonPF5RTQiBQCvT",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 412.66668701171875,
      "y": 455.66668701171875,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 512,
      "height": 0,
      "seed": 545038217,
      "groupIds": [],
      "strokeSharpness": "round",
      "boundElements": [],
      "updated": 1665056581937,
      "link": null,
      "locked": false,
      "startBinding": null,
      "endBinding": null,
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": null,
      "points": [
        [
          0,
          0
        ],
        [
          512,
          0
        ]
      ]
    },
    {
      "type": "text",
      "version": 20,
      "versionNonce": 362795881,
      "isDeleted": false,
      "id": "bvVfBs00UdKeAjbJXOi8O",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 454.66668701171875,
      "y": 247.33334350585938,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 161,
      "height": 25,
      "seed": 1557018727,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665056687614,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "user_id SERIAL",
      "baseline": 18,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "user_id SERIAL"
    },
    {
      "type": "text",
      "version": 55,
      "versionNonce": 502514214,
      "isDeleted": false,
      "id": "UTp9gTLOjzc9LzlAIY6Qm",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 445.3333435058594,
      "y": 364.66668701171875,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 288,
      "height": 25,
      "seed": 1938305959,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665170828348,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "name varchar(50) NOT NULL",
      "baseline": 18,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "name varchar(50) NOT NULL"
    },
    {
      "type": "text",
      "version": 116,
      "versionNonce": 613475066,
      "isDeleted": false,
      "id": "oo_duQqham1XOhGwPwVcH",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 432.6667175292969,
      "y": 482.6667175292969,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 478,
      "height": 25,
      "seed": 1992405833,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665170853145,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "phone_number VARCHAR(22) UNIQUE NOT NULL",
      "baseline": 18,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "phone_number VARCHAR(22) UNIQUE NOT NULL"
    },
    {
      "type": "text",
      "version": 227,
      "versionNonce": 428347559,
      "isDeleted": false,
      "id": "Jk-fXDPLxis0D8DKzoqCY",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1124,
      "y": 130,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 465,
      "height": 200,
      "seed": 985453511,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665060923207,
      "link": "",
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "TOOLS / LANGUAGES:\n- Java 8, Spring, IntelliJ\n- HTML, CSS, JavaScript & Visual Studio Code\n- PostgreSQL & pgAdmin\n- PostMan for testing\n- JSON\n\n",
      "baseline": 193,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "TOOLS / LANGUAGES:\n- Java 8, Spring, IntelliJ\n- HTML, CSS, JavaScript & Visual Studio Code\n- PostgreSQL & pgAdmin\n- PostMan for testing\n- JSON\n\n"
    },
    {
      "id": "3sXrKpC3ssV8mcysqEvHN",
      "type": "text",
      "x": 992.1667327880859,
      "y": 368.8333053588867,
      "width": 640,
      "height": 659,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 624868218,
      "version": 1389,
      "versionNonce": 952903270,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1665238296286,
      "link": null,
      "locked": false,
      "text": "Plan Outline / Logging\n1. Decide on tools and languages, install all necessary programs\n2. Design database table\n3. Create project in IntelliJ\n4. Create \"schema.sql\" file\n5. Create repository on GitHub\n6. Create \"data.sql\" file\n7. Create database in pgAdmin, test out schema and data files\n8. Create model class for \"User\"\n9. Create UserDao Interface\n10. Create JdbcUserDao class, start defining methods.\n    - Start with \"getAllUsers()\" method\n11. Start defining getUsersByNameAscending() and\n   getUsersByNameDescending() methods\n   - generate dummy data\n   - create getUsersByNameAscending() and Descending()\n     methods first to make sure they work, tackle pagination\n     later\n12. Created application.properties file to specify data source\n13. Test with Postman\n14. Figure out how to make just one API endpoint\n15. Backend server functionality is complete, still need\n   to address error/exception handling, testing, security\n16. Frontend basic HTML site is functional, should format\n   to look better.\n",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 652,
      "containerId": null,
      "originalText": "Plan Outline / Logging\n1. Decide on tools and languages, install all necessary programs\n2. Design database table\n3. Create project in IntelliJ\n4. Create \"schema.sql\" file\n5. Create repository on GitHub\n6. Create \"data.sql\" file\n7. Create database in pgAdmin, test out schema and data files\n8. Create model class for \"User\"\n9. Create UserDao Interface\n10. Create JdbcUserDao class, start defining methods.\n    - Start with \"getAllUsers()\" method\n11. Start defining getUsersByNameAscending() and\n   getUsersByNameDescending() methods\n   - generate dummy data\n   - create getUsersByNameAscending() and Descending()\n     methods first to make sure they work, tackle pagination\n     later\n12. Created application.properties file to specify data source\n13. Test with Postman\n14. Figure out how to make just one API endpoint\n15. Backend server functionality is complete, still need\n   to address error/exception handling, testing, security\n16. Frontend basic HTML site is functional, should format\n   to look better.\n"
    },
    {
      "id": "7ZCp0I_IHxIgGlr2nOn5x",
      "type": "text",
      "x": 1891.5001678466797,
      "y": 102.1667251586914,
      "width": 613,
      "height": 228,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1913920826,
      "version": 1285,
      "versionNonce": 1725056998,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1665172524803,
      "link": null,
      "locked": false,
      "text": "Running List of ?s\n1. Pagination on back end... what will this mean?\n   - currently have methods returning Lists of Lists,\n     display one list of list per page???\n2. Case-sensitivity\n3. How to restrict page size and page number on the backend\n   (in the UserController getUsers() method)??\n   - restricting page number to prevent OutOfBounds error?\n",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 221,
      "containerId": null,
      "originalText": "Running List of ?s\n1. Pagination on back end... what will this mean?\n   - currently have methods returning Lists of Lists,\n     display one list of list per page???\n2. Case-sensitivity\n3. How to restrict page size and page number on the backend\n   (in the UserController getUsers() method)??\n   - restricting page number to prevent OutOfBounds error?\n"
    },
    {
      "id": "KaJHiKsyY49RulEMiE66w",
      "type": "text",
      "x": 1915.5002136230469,
      "y": 477.5000534057617,
      "width": 670,
      "height": 127,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1246518054,
      "version": 809,
      "versionNonce": 1925639546,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1665243020952,
      "link": null,
      "locked": false,
      "text": "Running List of Errors / Exceptions\n1. Out of Bounds Error if page number input is greater than the\n   number of pages returned.\n2. Bad request / type mismatch if something other than an integer\n   is requested for pageSize or pageNumber",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 120,
      "containerId": null,
      "originalText": "Running List of Errors / Exceptions\n1. Out of Bounds Error if page number input is greater than the\n   number of pages returned.\n2. Bad request / type mismatch if something other than an integer\n   is requested for pageSize or pageNumber"
    },
    {
      "id": "od9WidHtO6Uvzmw4C4MCN",
      "type": "text",
      "x": 1724.8334350585938,
      "y": 734.1667709350586,
      "width": 433,
      "height": 228,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 216492090,
      "version": 353,
      "versionNonce": 1289002618,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1665175655923,
      "link": null,
      "locked": false,
      "text": "Next Big, General Steps\n1. Front End\n  - how to connect (just API Endpoints?)\n  - using Vue?\n2. Testing\n  - Unit testing\n  - Integration testing?\n3. Error / Exception Handling and messaging\n4. Security",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 221,
      "containerId": null,
      "originalText": "Next Big, General Steps\n1. Front End\n  - how to connect (just API Endpoints?)\n  - using Vue?\n2. Testing\n  - Unit testing\n  - Integration testing?\n3. Error / Exception Handling and messaging\n4. Security"
    },
    {
      "id": "V8HGNb76Zu_5_i37CwEF4",
      "type": "text",
      "x": 2762.778004964192,
      "y": 107.38887786865251,
      "width": 548,
      "height": 329,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1950181990,
      "version": 584,
      "versionNonce": 73224870,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1665251801922,
      "link": null,
      "locked": false,
      "text": "?s for Christopher\n1. Exception handling\n  - should I define custom exceptions?\n  - how to hide stack trace?\n  - In general, how to make the program \"do\" something\n    when it catches exception?\n2. Displaying results on front end after a search:\n   - would this require Vue to do? (something like\n     \"v-for\", for example)\n   - Easier / simpler way for sake of this project?\n3. Security\n   - Recommendations?\n   - Currently requires a password generated by Spring",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 322,
      "containerId": null,
      "originalText": "?s for Christopher\n1. Exception handling\n  - should I define custom exceptions?\n  - how to hide stack trace?\n  - In general, how to make the program \"do\" something\n    when it catches exception?\n2. Displaying results on front end after a search:\n   - would this require Vue to do? (something like\n     \"v-for\", for example)\n   - Easier / simpler way for sake of this project?\n3. Security\n   - Recommendations?\n   - Currently requires a password generated by Spring"
    },
    {
      "id": "0FOPZ_WPzgjIpIXWD1AFk",
      "type": "text",
      "x": 2855.000091552734,
      "y": 644.0555953979491,
      "width": 500,
      "height": 507,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 2027098810,
      "version": 731,
      "versionNonce": 189774138,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1665254775038,
      "link": null,
      "locked": false,
      "text": "Notes from Christopher\n1. Explain case-sensitivity\n2. pageSize:\n   - if (pageSize > 50) :\n      pageSize = 50;\nif (pageSize < 1) {\n    pageSize = 1;\n}\n3. Creating custom exceptions\n   - can put annotations in the exception class\n   - check Securing APIs lecture\n   - ResponseStatusException\n   - create custom exception (pageNotFound)\n4. DOM for front-end!!\n   - Use axios\n   - create onClick event to dynamically\n     create table\n   - The submit button won't actually submit info,\n     it will be asynchronous\n5. Redundant code in DAO--condense methods",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 500,
      "containerId": null,
      "originalText": "Notes from Christopher\n1. Explain case-sensitivity\n2. pageSize:\n   - if (pageSize > 50) :\n      pageSize = 50;\nif (pageSize < 1) {\n    pageSize = 1;\n}\n3. Creating custom exceptions\n   - can put annotations in the exception class\n   - check Securing APIs lecture\n   - ResponseStatusException\n   - create custom exception (pageNotFound)\n4. DOM for front-end!!\n   - Use axios\n   - create onClick event to dynamically\n     create table\n   - The submit button won't actually submit info,\n     it will be asynchronous\n5. Redundant code in DAO--condense methods"
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}